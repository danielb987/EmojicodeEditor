<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="EmojicodeEditor" default="default" basedir="." xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3" xmlns:jacoco="antlib:org.jacoco.ant">
    <description>Builds, tests, and runs the project EmojicodeEditor.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="EmojicodeEditor-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    
    <!-- We need to set class path properties for junit and hamcrest since Travis will fail if not set. -->
    <target name="-pre-init">
        <property name="libs.junit_4.classpath" value="lib/junit_4/junit-4.12.jar"/>
        <property name="libs.hamcrest.classpath" value="lib/hamcrest/hamcrest-core-1.3.jar"/>
    </target>
    
    <target name="-post-jar">
        <antcall target="-javadoc-build"/>
    </target>
    
    
    
    
    <property name="jacoco_result.dir" location="./target" />
    <property name="jacoco_result.classes.dir" location="${jacoco_result.dir}/classes" />
    <property name="jacoco_result.report.dir" location="${jacoco_result.dir}/site/jacoco" />
    <property name="jacoco_result.exec.file" location="${jacoco_result.dir}/jacoco.exec" />

    <!-- Step 1: Import JaCoCo Ant tasks -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="../../../lib/jacocoant.jar" />
    </taskdef>

    <target name="jacoco_test" depends="compile">
        <!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
        <jacoco:coverage destfile="${jacoco_result.exec.file}">
            <java classname="org.jacoco.examples.parser.Main" fork="true">
                <classpath path="${jacoco_result.classes.dir}" />
                <arg value="2 * 3 + 4"/>
                <arg value="2 + 3 * 4"/>
                <arg value="(2 + 3) * 4"/>
                <arg value="2 * 2 * 2 * 2"/>
                <arg value="1 + 2 + 3 + 4"/>
                <arg value="2 * 3 + 2 * 5"/>
            </java>
        </jacoco:coverage>
    </target>

    <target name="jacoco_report" depends="jacoco_test">
        <!-- Step 3: Create coverage report -->
        <jacoco:report>

            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${jacoco_result.exec.file}" />
            </executiondata>

            <!-- the class files and optional source files ... -->
            <structure name="JaCoCo Ant Example">
                <classfiles>
                    <fileset dir="${jacoco_result.classes.dir}" />
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${jacoco_src.dir}" />
                </sourcefiles>
            </structure>

            <!-- to produce reports in different formats. -->
            <html destdir="${jacoco_result.report.dir}" />
            <csv destfile="${jacoco_result.report.dir}/report.csv" />
            <xml destfile="${jacoco_result.report.dir}/report.xml" />
        </jacoco:report>
    </target>
    
    <target name="jacoco_rebuild" depends="clean,compile,jacoco_test,jacoco_report" />
    
</project>
